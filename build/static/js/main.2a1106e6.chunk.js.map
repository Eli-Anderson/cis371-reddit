{"version":3,"sources":["PostFooter.jsx","BigPost.jsx","db-init.js","Post.jsx","SubredditCreator.jsx","PostCreator.jsx","Feed.jsx","Login.jsx","AppHeader.jsx","SubredditList.jsx","Home.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","by","marginLeft","marginRight","fontWeight","PostFooter","time","userID","voteCount","userVote","onUpvote","onDownvote","subreddit","classes","Link1","forwardRef","ref","href","props","innerRef","to","Box","display","flexDirection","alignItems","px","Typography","IconButton","size","onClick","fontSize","color","flexGrow","alignSelf","variant","moment","duration","unix","seconds","diff","humanize","root","Link","component","justifySelf","BigPost","Modal","open","onClose","Grid","container","style","width","height","justify","alignContent","item","Fab","Card","overflow","padding","CardHeader","title","CardContent","source","markdown","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firestore","firestore","AppAUTH","auth","increment","FieldValue","getTimestamp","serverTimestamp","Post","postID","userVoteListener","useRef","voteCountListener","useState","setOpen","setUserVote","data","setData","user","useContext","AppContext","useEffect","current","collection","doc","username","onSnapshot","snapshot","exists","value","tryVote","voteChange","voteAmount","update","set","margin","CircularProgress","backgroundColor","content","window","url","textAlign","cursor","paper","outline","link","SubredditCreator","defaultValues","onSuccess","id","setID","name","setName","createSubreddit","useCallback","then","catch","err","console","log","alert","Button","label","Fade","in","onEscapeKeyDown","onBackdropClick","justifyContent","Paper","elevation","position","m","TextField","onChange","ev","target","substring","disabled","HorizontalRadio","children","PostCreator","iconClass","match","useRouteMatch","setSubreddit","type","setType","setTitle","setContent","setUrl","preview","setPreview","createPost","viewCount","get","Tooltip","params","className","FormControl","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","multiline","rows","border","borderRadius","marginTop","marginBottom","Checkbox","checked","gridListRoot","newPostIcon","Feed","posts","setPosts","loading","setLoading","subscribed","setSubscribed","listener","loadPosts","orderBy","limit","length","empty","docs","map","x","subscriptions","collectionGroup","where","toggleSubscribe","oldSubs","newSubs","indexOf","filter","concat","v","subs","includes","SubscribeIcon","GridList","cols","spacing","post","GridListTile","key","theme","modal","palette","background","boxShadow","shadows","inputTable","gridTemplateColumns","gridGap","fontFamily","buttonGroup","login","signup","Login","email","setEmail","password","setPassword","signInWithEmailAndPassword","setPersistence","reason","signUp","createUserWithEmailAndPassword","u","currentUser","updateProfile","displayName","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","undefined","preventDefault","spacer","container2","logo","buttons","selfButton","AppHeader","anchorRef","loginOpen","setLoginOpen","history","useHistory","handleClose","event","contains","direction","push","DialogTitle","Popper","anchorEl","transition","disablePortal","zIndex","TransitionProps","placement","Grow","transformOrigin","ClickAwayListener","onClickAway","MenuList","borderBottom","MenuItem","signOut","SubredditList","setSubscriptions","subreddits","setSubreddits","d","s","List","dense","ListItem","Home","minWidth","maxHeight","React","createContext","Boolean","location","hostname","ReactDOM","render","setUser","onAuthStateChanged","Provider","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a1106e6.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport { IconButton, Typography, Link, Box } from \"@material-ui/core\";\nimport ThumbUp from \"@material-ui/icons/ThumbUpAltOutlined\";\nimport ThumbDown from \"@material-ui/icons/ThumbDownAltOutlined\";\nimport moment from \"moment\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n    by: {\n        marginLeft: 6,\n        marginRight: 6,\n        fontWeight: \"unset\"\n    }\n});\n\nexport const PostFooter = ({\n    time,\n    userID,\n    voteCount,\n    userVote,\n    onUpvote,\n    onDownvote,\n    subreddit\n}) => {\n    const classes = useStyles({});\n\n    const Link1 = forwardRef(({ href, ...props }, ref) => (\n        <RouterLink innerRef={ref} to={href} {...props} />\n    ));\n\n    return (\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" px={2}>\n            <Box>\n                <Typography>{voteCount}</Typography>\n                <IconButton size=\"small\" onClick={onUpvote}>\n                    <ThumbUp\n                        fontSize=\"small\"\n                        color={userVote === 1 ? \"primary\" : \"inherit\"}\n                    />\n                </IconButton>\n                <IconButton size=\"small\" onClick={onDownvote}>\n                    <ThumbDown\n                        fontSize=\"small\"\n                        color={userVote === -1 ? \"error\" : \"inherit\"}\n                    />\n                </IconButton>\n            </Box>\n            <Box flexGrow={1} alignSelf=\"flex-end\">\n                <Typography\n                    variant=\"subtitle2\"\n                    color=\"textSecondary\"\n                    display=\"inline\"\n                >\n                    {time\n                        ? moment\n                              .duration(\n                                  moment.unix(time.seconds).diff(moment())\n                              )\n                              .humanize(true)\n                        : \"just now\"}\n                </Typography>\n                <Typography\n                    variant=\"subtitle2\"\n                    color=\"textSecondary\"\n                    display=\"inline\"\n                    classes={{ root: classes.by }}\n                >\n                    by\n                </Typography>\n                <Link\n                    href={`/u/${userID}`}\n                    component={Link1}\n                    variant=\"subtitle2\"\n                >{`/u/${userID}`}</Link>\n            </Box>\n            <Box justifySelf=\"flex-end\">\n                <Link\n                    component={Link1}\n                    href={`/r/${subreddit}`}\n                >{`/r/${subreddit}`}</Link>\n            </Box>\n        </Box>\n    );\n};\n","import React from \"react\";\nimport {\n    Card,\n    Modal,\n    Grid,\n    CardContent,\n    CardHeader,\n    Fab\n} from \"@material-ui/core\";\nimport ReactMarkdown from \"react-markdown\";\nimport Close from \"@material-ui/icons/Close\";\n\nexport const BigPost = props => {\n    return (\n        <Modal open={props.open} onClose={props.onClose}>\n            <Grid\n                container\n                style={{ width: \"100%\", height: \"100%\" }}\n                justify=\"center\"\n                alignContent=\"center\"\n            >\n                <Grid item style={{ width: \"80%\", height: \"80%\" }}>\n                    <div\n                        style={{\n                            width: \"100%\",\n                            height: \"80%\"\n                        }}\n                    >\n                        <Fab size=\"small\" onClick={props.onClose}>\n                            <Close />\n                        </Fab>\n                        <Card\n                            style={{\n                                width: \"100%\",\n                                height: \"100%\",\n                                overflow: \"scroll\",\n                                padding: 20\n                            }}\n                        >\n                            <CardHeader title={props.title} />\n                            <CardContent>\n                                <ReactMarkdown source={props.markdown} />\n                            </CardContent>\n                        </Card>\n                    </div>\n                </Grid>\n            </Grid>\n        </Modal>\n    );\n};\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBjLQQVT_p2WvKcngzlMgwrA8roykW8PvY\",\n    authDomain: \"cis371reddit.firebaseapp.com\",\n    databaseURL: \"https://cis371reddit.firebaseio.com\",\n    projectId: \"cis371reddit\",\n    storageBucket: \"cis371reddit.appspot.com\",\n    messagingSenderId: \"408840711489\",\n    appId: \"1:408840711489:web:8a321096229e2e2ac385c0\",\n    measurementId: \"G-CR1H4R4FN2\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst Firestore = firebase.firestore();\nconst AppAUTH = firebase.auth();\nconst increment = firebase.firestore.FieldValue.increment;\nconst getTimestamp = firebase.firestore.FieldValue.serverTimestamp;\nexport { Firestore, AppAUTH, increment, getTimestamp };\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { PostFooter } from \"./PostFooter\";\nimport { Card, CardHeader, CircularProgress } from \"@material-ui/core\";\nimport { BigPost } from \"./BigPost\";\nimport { Firestore, increment } from \"./db-init\";\nimport { AppContext } from \"./App\";\n\nexport const Post = ({ postID, subreddit }) => {\n    const userVoteListener = useRef(null);\n    const voteCountListener = useRef(null);\n    const [open, setOpen] = useState(false);\n    const [userVote, setUserVote] = useState(null);\n    const [data, setData] = useState(null);\n\n    const { user } = useContext(AppContext);\n\n    useEffect(() => {\n        if (user) {\n            if (!userVoteListener.current) {\n                userVoteListener.current = Firestore.collection(\"users\")\n                    .doc(user.username)\n                    .collection(\"votes\")\n                    .doc(postID)\n                    .onSnapshot(snapshot => {\n                        if (snapshot.exists) {\n                            setUserVote(snapshot.data().value);\n                        }\n                    });\n            } else {\n                userVoteListener.current(); // unsubscribe\n            }\n        }\n    }, [postID, user]);\n\n    useEffect(() => {\n        if (!voteCountListener.current) {\n            voteCountListener.current = Firestore.collection(\"subreddits\")\n                .doc(subreddit)\n                .collection(\"posts\")\n                .doc(postID)\n                .onSnapshot(snapshot => {\n                    if (snapshot.exists) {\n                        setData(snapshot.data());\n                    }\n                });\n        } else {\n            voteCountListener.current(); // unsubscribe\n        }\n    }, [postID, subreddit]);\n\n    const tryVote = (voteChange, voteAmount) => {\n        if (user) {\n            if (voteChange) {\n                Firestore.collection(\"subreddits\")\n                    .doc(subreddit)\n                    .collection(\"posts\")\n                    .doc(postID)\n                    .update({\n                        voteCount: increment(voteChange)\n                    });\n            }\n            Firestore.collection(\"users\")\n                .doc(user.username)\n                .collection(\"votes\")\n                .doc(postID)\n                .set({\n                    value: voteAmount\n                });\n        }\n    };\n\n    if (data === null)\n        return (\n            <Card style={{ margin: 6 }}>\n                <CircularProgress />\n                <div style={{ backgroundColor: \"#fafafa\" }}></div>\n            </Card>\n        );\n\n    return (\n        <div>\n            <Card style={{ margin: 6 }}>\n                <CardHeader\n                    onClick={() => {\n                        if (data.content) setOpen(true);\n                        else window.open(data.url, \"_blank\");\n                    }}\n                    style={{ textAlign: \"left\", cursor: \"pointer\" }}\n                    title={data.title}\n                ></CardHeader>\n                <div style={{ backgroundColor: \"#fafafa\" }}>\n                    <PostFooter\n                        subreddit={subreddit}\n                        time={data.time}\n                        userID={data.userID}\n                        voteCount={data.voteCount}\n                        userVote={userVote}\n                        onUpvote={() => {\n                            let voteChange = 0;\n                            let voteAmount = 0;\n\n                            if (userVote === -1) {\n                                voteChange = 2;\n                                voteAmount = 1;\n                            } else if (!userVote) {\n                                voteChange = 1;\n                                voteAmount = 1;\n                            } else if (userVote === 1) {\n                                voteChange = -1;\n                                voteAmount = 0;\n                            }\n                            tryVote(voteChange, voteAmount);\n                        }}\n                        onDownvote={() => {\n                            let voteChange = 0;\n                            let voteAmount = 0;\n\n                            if (userVote === 1) {\n                                voteChange = -2;\n                                voteAmount = -1;\n                            } else if (!userVote) {\n                                voteChange = -1;\n                                voteAmount = -1;\n                            } else if (userVote === -1) {\n                                voteChange = 1;\n                                voteAmount = 0;\n                            }\n                            tryVote(voteChange, voteAmount);\n                        }}\n                    />\n                </div>\n            </Card>\n            <BigPost\n                open={open}\n                onClose={() => setOpen(false)}\n                markdown={data.content}\n                title={data.title}\n            />\n        </div>\n    );\n};\n","import React, { useState, useCallback, useContext } from \"react\";\nimport {\n    Modal,\n    Paper,\n    Box,\n    Typography,\n    TextField,\n    Button,\n    Fade\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Firestore, getTimestamp } from \"./db-init\";\nimport { AppContext } from \"./App\";\n\nconst useStyles = makeStyles({\n    paper: {\n        width: \"80%\",\n        height: \"80%\",\n        outline: \"none\"\n    },\n    title: {\n        width: \"75%\"\n    },\n    content: {\n        width: \"75%\"\n    },\n    link: {\n        width: \"75%\"\n    }\n});\n\nexport const SubredditCreator = ({ defaultValues, onSuccess, ...props }) => {\n    const classes = useStyles(props);\n\n    const [open, setOpen] = useState(false);\n\n    const [id, setID] = useState((defaultValues && defaultValues.id) || \"\");\n    const [name, setName] = useState(\n        (defaultValues && defaultValues.name) || \"\"\n    );\n    const { user } = useContext(AppContext);\n\n    const createSubreddit = useCallback(() => {\n        const data = {\n            name,\n            time: getTimestamp(),\n            userID: user.username\n        };\n        Firestore.collection(\"subreddits\")\n            .doc(id)\n            .set(data)\n            .then(() => {\n                setOpen(false);\n                setID(\"\");\n                setName(\"\");\n            })\n            .then(onSuccess)\n            .catch(err => {\n                console.log(err);\n                window.alert(\"Something went wrong\");\n            });\n    }, [name, id, onSuccess, user]);\n\n    return (\n        <>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => setOpen(true)}\n            >\n                {(defaultValues && defaultValues.label) || \"New Subreddit\"}\n            </Button>\n            <Fade in={open}>\n                <Modal\n                    open={true}\n                    onClose={() => setOpen(false)}\n                    onEscapeKeyDown={() => setOpen(false)}\n                    onBackdropClick={() => setOpen(false)}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\"\n                    }}\n                >\n                    <Paper elevation={18} classes={{ root: classes.paper }}>\n                        <Box\n                            position=\"relative\"\n                            display=\"flex\"\n                            flexDirection=\"column\"\n                            alignItems=\"center\"\n                            m={2}\n                            height=\"95%\"\n                        >\n                            <Typography variant=\"h4\">\n                                Create a subreddit...\n                            </Typography>\n                            <TextField\n                                classes={{ root: classes.title }}\n                                label=\"Unique ID\"\n                                value={`/r/${id}`}\n                                onChange={ev =>\n                                    setID(ev.target.value.substring(3))\n                                }\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                            <TextField\n                                classes={{ root: classes.title }}\n                                label=\"Display Name\"\n                                value={name}\n                                onChange={ev => setName(ev.target.value)}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                            <Box flexGrow={1} />\n                            <Box alignSelf=\"flex-end\">\n                                <Button\n                                    disabled={!id || !name || !user}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        createSubreddit();\n                                    }}\n                                >\n                                    {user ? \"Create\" : \"Must be signed in\"}\n                                </Button>\n                            </Box>\n                        </Box>\n                    </Paper>\n                </Modal>\n            </Fade>\n        </>\n    );\n};\n","import React, { useState, useCallback, useContext } from \"react\";\nimport {\n    Modal,\n    Paper,\n    Box,\n    Typography,\n    TextField,\n    RadioGroup,\n    Radio,\n    FormControl,\n    FormLabel,\n    FormControlLabel,\n    Checkbox,\n    Button,\n    Fade,\n    IconButton,\n    Tooltip\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Firestore, getTimestamp } from \"./db-init\";\nimport { AppContext } from \"./App\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\n\nconst HorizontalRadio = props => (\n    <Box\n        width=\"40%\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n    >\n        {props.children}\n    </Box>\n);\n\nconst useStyles = makeStyles({\n    paper: {\n        width: \"80%\",\n        height: \"85%\",\n        outline: \"none\"\n    },\n    title: {\n        width: \"75%\"\n    },\n    content: {\n        width: \"75%\"\n    },\n    link: {\n        width: \"75%\"\n    }\n});\n\nexport const PostCreator = ({ iconClass, ...props }) => {\n    const classes = useStyles(props);\n    const match = useRouteMatch(\"/r/:subreddit\");\n\n    const [open, setOpen] = useState(false);\n\n    const [subreddit, setSubreddit] = useState(\"\");\n    const [type, setType] = useState(\"link\");\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [url, setUrl] = useState(\"\");\n    const [preview, setPreview] = useState(false);\n\n    const { user } = useContext(AppContext);\n\n    const createPost = useCallback(() => {\n        const data = {\n            title,\n            time: getTimestamp(),\n            voteCount: 0,\n            viewCount: 0,\n            userID: user.username,\n            subreddit: subreddit\n        };\n        if (type === \"link\") {\n            data.url = url;\n        } else {\n            data.content = content;\n        }\n        Firestore.collection(\"subreddits\")\n            .doc(subreddit)\n            .get()\n            .then(snapshot => {\n                if (snapshot.exists) {\n                    Firestore.collection(\"subreddits\")\n                        .doc(subreddit)\n                        .collection(\"posts\")\n                        .doc()\n                        .set(data)\n                        .then(() => {\n                            setOpen(false);\n                            setType(\"link\");\n                            setTitle(\"\");\n                            setContent(\"\");\n                            setUrl(\"\");\n                            setPreview(false);\n                        })\n                        .catch(err => {\n                            console.log(err);\n                            window.alert(\"Something went wrong\");\n                        });\n                } else {\n                    window.alert(\"That subreddit does not exist\");\n                }\n            });\n    }, [subreddit, type, title, url, content, user]);\n\n    return (\n        <>\n            <Tooltip title=\"New Post\">\n                <IconButton\n                    size=\"small\"\n                    onClick={() => {\n                        if (match) setSubreddit(match.params.subreddit);\n                        setOpen(true);\n                    }}\n                >\n                    <PostAddIcon className={iconClass} />\n                </IconButton>\n            </Tooltip>\n            <Fade in={open}>\n                <Modal\n                    open={true}\n                    onClose={() => setOpen(false)}\n                    onEscapeKeyDown={() => setOpen(false)}\n                    onBackdropClick={() => setOpen(false)}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\"\n                    }}\n                >\n                    <Paper elevation={18} classes={{ root: classes.paper }}>\n                        <Box\n                            position=\"relative\"\n                            display=\"flex\"\n                            flexDirection=\"column\"\n                            alignItems=\"center\"\n                            m={2}\n                            height=\"95%\"\n                        >\n                            <Typography variant=\"h4\">\n                                Create a post...\n                            </Typography>\n                            <TextField\n                                classes={{ root: classes.title }}\n                                label=\"Subreddit\"\n                                value={`/r/${subreddit}`}\n                                onChange={ev => {\n                                    console.log(ev.target.value);\n                                    setSubreddit(ev.target.value.substring(3));\n                                }}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                            <TextField\n                                classes={{ root: classes.title }}\n                                label=\"Title\"\n                                value={title}\n                                onChange={ev => setTitle(ev.target.value)}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                            <FormControl component={HorizontalRadio}>\n                                <FormLabel component=\"legend\">Type</FormLabel>\n                                <RadioGroup\n                                    name=\"type\"\n                                    value={type}\n                                    onChange={ev => setType(ev.target.value)}\n                                    row\n                                >\n                                    <FormControlLabel\n                                        value=\"link\"\n                                        control={<Radio value=\"link\" />}\n                                        label=\"Link\"\n                                    />\n                                    <FormControlLabel\n                                        value=\"markdown\"\n                                        control={<Radio value=\"markdown\" />}\n                                        label=\"Markdown\"\n                                    />\n                                </RadioGroup>\n                            </FormControl>\n                            {type === \"markdown\" && !preview && (\n                                <TextField\n                                    classes={{ root: classes.content }}\n                                    label=\"Text/Markdown content\"\n                                    value={content}\n                                    onChange={ev => setContent(ev.target.value)}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    multiline\n                                    rows={8}\n                                />\n                            )}\n                            {type === \"markdown\" && preview && (\n                                <Box\n                                    border=\"1px solid rgba(0,0,0,0.23)\"\n                                    borderRadius=\"4px\"\n                                    width=\"75%\"\n                                    height=\"260px\"\n                                    overflow=\"scroll\"\n                                    marginTop=\"16px\"\n                                    marginBottom=\"8px\"\n                                >\n                                    <ReactMarkdown source={content} />\n                                </Box>\n                            )}\n                            {type === \"markdown\" && (\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            checked={preview}\n                                            onChange={(ev, value) =>\n                                                setPreview(value)\n                                            }\n                                        />\n                                    }\n                                    label=\"Preview\"\n                                />\n                            )}\n                            {type === \"link\" && (\n                                <TextField\n                                    classes={{ root: classes.link }}\n                                    label=\"URL\"\n                                    value={url}\n                                    onChange={ev => setUrl(ev.target.value)}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                />\n                            )}\n                            <Box flexGrow={1} />\n                            <Box alignSelf=\"flex-end\">\n                                <Button\n                                    disabled={\n                                        !title ||\n                                        (type === \"link\" && !url) ||\n                                        (type === \"markdown\" && !content) ||\n                                        !user\n                                    }\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        createPost();\n                                    }}\n                                >\n                                    {user ? \"Create\" : \"Must be signed in\"}\n                                </Button>\n                            </Box>\n                        </Box>\n                    </Paper>\n                </Modal>\n            </Fade>\n        </>\n    );\n};\n","import React, {\n    useState,\n    useEffect,\n    useRef,\n    useCallback,\n    useContext\n} from \"react\";\nimport { Post } from \"./Post\";\nimport {\n    GridList,\n    GridListTile,\n    Typography,\n    Box,\n    CircularProgress,\n    Button,\n    Tooltip,\n    IconButton\n} from \"@material-ui/core\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Firestore } from \"./db-init\";\nimport { SubredditCreator } from \"./SubredditCreator\";\nimport { PostCreator } from \"./PostCreator\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport { AppContext } from \"./App\";\n\nconst useStyles = makeStyles({\n    gridListRoot: { margin: \"0 !important\", height: \"100%\" },\n    newPostIcon: { width: \"2em\", height: \"2em\" }\n});\n\nexport const Feed = props => {\n    const classes = useStyles(props);\n    const [posts, setPosts] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [name, setName] = useState(\"Home\");\n    const [subscribed, setSubscribed] = useState(false);\n    const listener = useRef(null);\n\n    const { user } = useContext(AppContext);\n\n    const match = useRouteMatch(\"/r/:subreddit\");\n\n    const subreddit = match && match.params.subreddit;\n\n    const loadPosts = useCallback(\n        posts => {\n            if (subreddit) {\n                setLoading(true);\n                Firestore.collection(\"subreddits\")\n                    .doc(subreddit)\n                    .get()\n                    .then(snapshot => {\n                        if (snapshot.exists) {\n                            setName(snapshot.data().name);\n                            if (listener.current) {\n                                listener.current();\n                            }\n                            listener.current = Firestore.collection(\n                                \"subreddits\"\n                            )\n                                .doc(subreddit)\n                                .collection(\"posts\")\n                                .orderBy(\"time\", \"desc\")\n                                .limit(4 + ((posts && posts.length) || 0))\n                                .onSnapshot(snapshot => {\n                                    setLoading(false);\n                                    if (!snapshot.empty) {\n                                        setPosts(\n                                            snapshot.docs.map(x => ({\n                                                postID: x.id,\n                                                subreddit: x.data().subreddit\n                                            }))\n                                        );\n                                    } else {\n                                        setPosts([]);\n                                    }\n                                });\n                        } else {\n                            setLoading(false);\n                            setPosts(null);\n                            setName(\"Home\");\n                        }\n                    });\n            } else {\n                setName(\"Home\");\n                setLoading(true);\n                if (user) {\n                    Firestore.collection(\"users\")\n                        .doc(user.username)\n                        .get()\n                        .then(snapshot => {\n                            const { subscriptions } = snapshot.data();\n\n                            if (subscriptions && subscriptions.length) {\n                                Firestore.collectionGroup(\"posts\")\n                                    .where(\"subreddit\", \"in\", subscriptions)\n                                    .orderBy(\"time\", \"desc\")\n                                    .limit(4 + ((posts && posts.length) || 0))\n                                    .onSnapshot(snapshot => {\n                                        setLoading(false);\n                                        if (!snapshot.empty) {\n                                            setPosts(\n                                                snapshot.docs.map(x => ({\n                                                    postID: x.id,\n                                                    subreddit: x.data()\n                                                        .subreddit\n                                                }))\n                                            );\n                                        } else {\n                                            setPosts([]);\n                                        }\n                                    });\n                            }\n                        });\n                } else {\n                    setName(\"Home\");\n                    Firestore.collectionGroup(\"posts\")\n                        .orderBy(\"time\", \"desc\")\n                        .limit(4 + ((posts && posts.length) || 0))\n                        .onSnapshot(snapshot => {\n                            setLoading(false);\n                            if (!snapshot.empty) {\n                                setPosts(\n                                    snapshot.docs.map(x => ({\n                                        postID: x.id,\n                                        subreddit: x.data().subreddit\n                                    }))\n                                );\n                            } else {\n                                setPosts([]);\n                            }\n                        });\n                }\n            }\n        },\n        [subreddit, user]\n    );\n\n    const toggleSubscribe = () => {\n        if (user && subreddit) {\n            Firestore.collection(\"users\")\n                .doc(user.username)\n                .get()\n                .then(snapshot => {\n                    const oldSubs = snapshot.data().subscriptions;\n                    let newSubs = [];\n                    if (oldSubs.indexOf(subreddit) >= 0) {\n                        newSubs = oldSubs.filter(x => x !== subreddit);\n                    } else {\n                        newSubs = oldSubs.concat([subreddit]);\n                    }\n                    Firestore.collection(\"users\")\n                        .doc(user.username)\n                        .update({\n                            subscriptions: newSubs\n                        })\n                        .then(() => {\n                            setSubscribed(v => !v);\n                        });\n                });\n        }\n    };\n\n    useEffect(() => {\n        if (subreddit && user) {\n            Firestore.collection(\"users\")\n                .doc(user.username)\n                .get()\n                .then(snapshot => {\n                    const subs = snapshot.data().subscriptions;\n                    setSubscribed(subs && subs.includes(subreddit));\n                });\n        }\n    }, [user, subreddit]);\n\n    useEffect(() => {\n        loadPosts([]);\n    }, [loadPosts]);\n\n    if (posts === null && loading) {\n        return (\n            <Box margin=\"20px\">\n                <CircularProgress />\n            </Box>\n        );\n    }\n\n    if (posts === null) {\n        return (\n            <div>\n                <Typography>Oops... This doesn't exist yet</Typography>\n                <SubredditCreator\n                    defaultValues={{\n                        id: subreddit,\n                        label: `Create /r/${subreddit}`\n                    }}\n                    onSuccess={() => loadPosts(posts)}\n                />\n            </div>\n        );\n    }\n\n    const SubscribeIcon = () => {\n        return (\n            <Box marginLeft=\"16px\">\n                <Tooltip title={subscribed ? \"Unsubscribe\" : \"Subscribe\"}>\n                    <IconButton size=\"small\" onClick={toggleSubscribe}>\n                        {subscribed ? (\n                            <Favorite\n                                style={{ width: \"1.5em\", height: \"1.5em\" }}\n                            />\n                        ) : (\n                            <FavoriteBorder\n                                style={{ width: \"1.5em\", height: \"1.5em\" }}\n                            />\n                        )}\n                    </IconButton>\n                </Tooltip>\n            </Box>\n        );\n    };\n\n    if (posts.length > 0) {\n        return (\n            <Box margin=\"10px\">\n                <Box display=\"flex\" justifyContent=\"center\">\n                    <Typography variant=\"h3\">{name}</Typography>\n                    {subreddit && <SubscribeIcon />}\n                </Box>\n                <GridList\n                    cols={2}\n                    spacing={20}\n                    classes={{ root: classes.gridListRoot }}\n                >\n                    {posts.map(post => (\n                        <GridListTile\n                            key={post.postID}\n                            cols={1}\n                            rows={1}\n                            style={{ height: \"unset\" }}\n                        >\n                            <Post {...post} key={post.postID} />\n                        </GridListTile>\n                    ))}\n                </GridList>\n                {loading ? (\n                    <CircularProgress />\n                ) : (\n                    <Button\n                        onClick={() => {\n                            loadPosts(posts);\n                        }}\n                        disabled={loading}\n                        variant=\"outlined\"\n                    >\n                        Load More\n                    </Button>\n                )}\n            </Box>\n        );\n    } else {\n        return (\n            <Box\n                width=\"100%\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n            >\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                    <Typography variant=\"h3\">{name}</Typography>\n                    {subreddit && <SubscribeIcon />}\n                </Box>\n                <Box width=\"50%\">\n                    <Typography variant=\"h6\">\n                        Hmm. We could not find any posts. Why not make the first\n                        one?\n                    </Typography>\n                    <PostCreator iconClass={classes.newPostIcon} />\n                </Box>\n            </Box>\n        );\n    }\n};\n","import React, { useState, useCallback } from \"react\";\nimport {\n    Button,\n    Modal,\n    makeStyles,\n    Fade,\n    Backdrop,\n    TextField\n} from \"@material-ui/core\";\nimport { AppAUTH, Firestore } from \"./db-init\";\n\nconst useStyles = makeStyles(theme => ({\n    modal: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        borderRadius: \"2mm\",\n        padding: \"1em\",\n        width: \"50vw\",\n        boxShadow: theme.shadows[5],\n        outline: \"none\"\n    },\n    inputTable: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(2, auto)\",\n        borderRadius: \"4px\",\n        gridGap: \"2mm\",\n        fontSize: \"16px\",\n        fontFamily: \"Roboto, sans- serif\"\n    },\n    buttonGroup: {\n        width: \"100 %\",\n        padding: \"12px\",\n        marginRight: \"auto\",\n        marginLeft: \"auto\",\n        textAlign: \"right\",\n        position: \"relative\"\n    },\n    login: {\n        color: \"rgb(90, 241, 173)\",\n        fontSize: \"16px\",\n        alignItems: \"center\"\n    },\n    signup: {\n        color: \"rgb(120, 173, 149)\",\n        fontSize: \"16px\",\n        alignItems: \"center\"\n    }\n}));\n\nexport const Login = ({ open, onClose, ...props }) => {\n    const classes = useStyles(props);\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [name, setName] = useState(\"\");\n\n    const login = useCallback(() => {\n        AppAUTH.signInWithEmailAndPassword(email, password)\n            .then(() => AppAUTH.setPersistence(\"local\"))\n            .then(() => {\n                onClose();\n            })\n            .catch(reason => window.alert(reason));\n    }, [email, password, onClose]);\n\n    const signUp = useCallback(() => {\n        Firestore.collection(\"users\")\n            .doc(name)\n            .get()\n            .then(snapshot => {\n                if (snapshot.exists) window.alert(\"Username is already in use\");\n                else {\n                    AppAUTH.createUserWithEmailAndPassword(email, password)\n                        .then(u => {\n                            AppAUTH.currentUser\n                                .updateProfile({\n                                    displayName: name\n                                })\n                                .then(() => {\n                                    Firestore.collection(\"users\")\n                                        .doc(name)\n                                        .set({\n                                            subscriptions: []\n                                        })\n                                        .then(() => {\n                                            onClose();\n                                        });\n                                });\n                        })\n                        .catch(reason => window.alert(reason));\n                }\n            });\n    }, [email, password, onClose, name]);\n\n    return (\n        <div>\n            <Modal\n                className={classes.modal}\n                open={open}\n                onClose={onClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500\n                }}\n            >\n                <Fade in={open}>\n                    <div className={classes.paper}>\n                        <form>\n                            <div className={classes.inputTable}>\n                                <TextField\n                                    label=\"Email\"\n                                    type=\"email\"\n                                    value={email}\n                                    onChange={ev => setEmail(ev.target.value)}\n                                />\n                                <TextField\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    value={password}\n                                    onChange={ev =>\n                                        setPassword(ev.target.value)\n                                    }\n                                />\n                                <TextField\n                                    label=\"Username\"\n                                    value={name}\n                                    onChange={ev => setName(ev.target.value)}\n                                />\n                            </div>\n                            <div className={classes.buttonGroup}>\n                                <Button\n                                    className={classes.login}\n                                    variant={name ? undefined : \"outlined\"}\n                                    disabled={!email || !password}\n                                    onClick={ev => {\n                                        ev.preventDefault();\n                                        login();\n                                    }}\n                                    type=\"submit\"\n                                >\n                                    Log in\n                                </Button>\n\n                                <Button\n                                    className={classes.signup}\n                                    variant={name ? \"outlined\" : undefined}\n                                    disabled={!email || !password || !name}\n                                    onClick={() => {\n                                        signUp();\n                                    }}\n                                >\n                                    Sign up\n                                </Button>\n                            </div>\n                        </form>\n                    </div>\n                </Fade>\n            </Modal>\n        </div>\n    );\n};\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n    Grid,\n    DialogTitle,\n    IconButton,\n    Typography,\n    Box,\n    Tooltip\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport RedditIcon from \"@material-ui/icons/Reddit\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport { useHistory } from \"react-router-dom\";\n\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport { AppContext } from \"./App\";\nimport { Login } from \"./Login\";\nimport { PostCreator } from \"./PostCreator\";\nimport { AppAUTH } from \"./db-init\";\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: \"rgb(212,234,224)\",\n        width: \"100%\",\n        height: \"60%\"\n    },\n    spacer: {\n        flexGrow: 1\n    },\n    container: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(2, auto)\",\n        gridGap: \"0\",\n        cursor: \"pointer\"\n    },\n    container2: {\n        margin: \"4mm 2mm 2mm 2mm\",\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(4, auto)\",\n        gridGap: \"2mm\"\n    },\n    logo: {\n        margin: \"1.5mm 1mm 0 5mm \",\n        width: \"2em\",\n        height: \"2em\",\n        color: \"white\",\n        background: \"red\",\n        borderRadius: \"100%\"\n    },\n    buttons: {\n        width: \"1.5em\",\n        height: \"1.5em\"\n    },\n    selfButton: {\n        marginTop: \"-1mm\",\n        width: \"2em\",\n        height: \"2em\",\n        border: \"3px solid black\",\n        borderRadius: \"1mm\"\n    }\n});\n\nexport const AppHeader = props => {\n    const classes = useStyles(props);\n    const [open, setOpen] = useState(false);\n    const anchorRef = useRef(null);\n\n    const [loginOpen, setLoginOpen] = useState(false);\n\n    const history = useHistory();\n\n    const { user } = useContext(AppContext);\n\n    const handleAccountClick = () => {\n        if (user) {\n            setOpen(true);\n        } else {\n            setLoginOpen(true);\n        }\n    };\n    const handleClose = event => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n        setOpen(false);\n    };\n\n    return (\n        <Grid container direction=\"row\" classes={{ root: classes.root }}>\n            <Login open={loginOpen} onClose={() => setLoginOpen(false)} />\n            <Grid item>\n                {/* Logo */}\n                <div\n                    className={classes.container}\n                    onClick={() => {\n                        history.push(\"/\");\n                    }}\n                >\n                    <RedditIcon className={classes.logo}></RedditIcon>\n                    <DialogTitle>The Reddit Project</DialogTitle>\n                </div>\n            </Grid>\n            <Grid item classes={{ root: classes.spacer }}>\n                <div></div>\n            </Grid>\n            <Grid item>\n                <div className={classes.container2}>\n                    <PostCreator iconClass={classes.buttons} />\n                    <Tooltip title={user ? \"Account\" : \"Sign in\"}>\n                        <IconButton\n                            size=\"small\"\n                            ref={anchorRef}\n                            onClick={handleAccountClick}\n                        >\n                            <AccountCircle className={classes.buttons} />\n                        </IconButton>\n                    </Tooltip>\n                    <Popper\n                        open={open}\n                        anchorEl={anchorRef.current}\n                        transition\n                        disablePortal\n                        style={{ zIndex: 1 }}\n                    >\n                        {({ TransitionProps, placement }) => (\n                            <Grow\n                                {...TransitionProps}\n                                style={{\n                                    transformOrigin:\n                                        placement === \"bottom\"\n                                            ? \"center top\"\n                                            : \"center bottom\"\n                                }}\n                            >\n                                <Paper>\n                                    <ClickAwayListener\n                                        onClickAway={handleClose}\n                                    >\n                                        <MenuList>\n                                            <Box\n                                                margin=\"4px\"\n                                                borderBottom=\"1px solid rgba(0,0,0,0.1)\"\n                                            >\n                                                <Typography\n                                                    variant=\"body2\"\n                                                    color=\"textSecondary\"\n                                                >\n                                                    Signed in as\n                                                </Typography>\n                                                <Typography\n                                                    variant=\"body2\"\n                                                    color=\"textSecondary\"\n                                                >\n                                                    {user ? user.username : \"\"}\n                                                </Typography>\n                                            </Box>\n                                            <MenuItem\n                                                onClick={() => {\n                                                    history.push(\n                                                        `/u/${user.username}`\n                                                    );\n                                                }}\n                                            >\n                                                Profile\n                                            </MenuItem>\n                                            <MenuItem\n                                                onClick={() => {\n                                                    AppAUTH.signOut().then(\n                                                        () => {\n                                                            setOpen(false);\n                                                        }\n                                                    );\n                                                }}\n                                            >\n                                                Logout\n                                            </MenuItem>\n                                        </MenuList>\n                                    </ClickAwayListener>\n                                </Paper>\n                            </Grow>\n                        )}\n                    </Popper>\n                </div>\n            </Grid>\n        </Grid>\n    );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport {\n    List,\n    ListItem,\n    Paper,\n    Box,\n    Typography,\n    CircularProgress\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { Firestore } from \"./db-init\";\nimport { AppContext } from \"./App\";\n\nexport const SubredditList = props => {\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [subreddits, setSubreddits] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const { user } = useContext(AppContext);\n\n    useEffect(() => {\n        setLoading(true);\n        if (user) {\n            Firestore.collection(\"users\")\n                .doc(user.username)\n                .get()\n                .then(snapshot => {\n                    setSubscriptions(snapshot.data().subscriptions || []);\n                    return snapshot.data().subscriptions || [];\n                })\n                .then(subs => {\n                    Firestore.collection(\"subreddits\")\n                        .get()\n                        .then(snapshot => {\n                            setSubreddits(\n                                snapshot.docs\n                                    .map(d => d.id)\n                                    .filter(s => !subs.includes(s))\n                            );\n                            setLoading(false);\n                        });\n                });\n        } else {\n            Firestore.collection(\"subreddits\")\n                .get()\n                .then(snapshot => {\n                    setSubreddits(snapshot.docs.map(d => d.id));\n                    setLoading(false);\n                });\n        }\n    }, [user]);\n\n    if (user)\n        return (\n            <Paper elevation={4}>\n                <Box>\n                    <List dense>\n                        <ListItem>\n                            <Box\n                                display=\"flex\"\n                                width=\"100%\"\n                                justifyContent=\"center\"\n                            >\n                                <Typography\n                                    color=\"textSecondary\"\n                                    variant=\"subtitle2\"\n                                >\n                                    Subscriptions\n                                </Typography>\n                            </Box>\n                        </ListItem>\n                        {loading ? (\n                            <CircularProgress />\n                        ) : (\n                            subscriptions.map(x => (\n                                <ListItem key={x}>\n                                    <RouterLink to={`/r/${x}`}>{x}</RouterLink>\n                                </ListItem>\n                            ))\n                        )}\n\n                        <ListItem>\n                            <Box\n                                display=\"flex\"\n                                width=\"100%\"\n                                justifyContent=\"center\"\n                            >\n                                <Typography\n                                    color=\"textSecondary\"\n                                    variant=\"subtitle2\"\n                                >\n                                    Other Subreddits\n                                </Typography>\n                            </Box>\n                        </ListItem>\n                        {loading ? (\n                            <CircularProgress />\n                        ) : (\n                            subreddits.map(x => (\n                                <ListItem key={x}>\n                                    <RouterLink to={`/r/${x}`}>{x}</RouterLink>\n                                </ListItem>\n                            ))\n                        )}\n                    </List>\n                </Box>\n            </Paper>\n        );\n\n    return (\n        <Paper elevation={4}>\n            <Box>\n                <List dense>\n                    <ListItem>\n                        <Box\n                            display=\"flex\"\n                            width=\"100%\"\n                            justifyContent=\"center\"\n                        >\n                            <Typography\n                                color=\"textSecondary\"\n                                variant=\"subtitle2\"\n                            >\n                                Subreddits\n                            </Typography>\n                        </Box>\n                    </ListItem>\n                    {loading ? (\n                        <CircularProgress />\n                    ) : (\n                        subreddits.map(x => (\n                            <ListItem key={x}>\n                                <RouterLink to={`/r/${x}`}>{x}</RouterLink>\n                            </ListItem>\n                        ))\n                    )}\n                </List>\n            </Box>\n        </Paper>\n    );\n};\n","import React from \"react\";\nimport { Feed } from \"./Feed\";\nimport { AppHeader } from \"./AppHeader\";\nimport { Box } from \"@material-ui/core\";\nimport { SubredditList } from \"./SubredditList\";\n\nexport const Home = props => {\n    return (\n        <Box display=\"flex\" flexDirection=\"column\">\n            <Box width=\"100%\" height=\"100px\">\n                <AppHeader />\n            </Box>\n            <Box width=\"100%\" display=\"flex\">\n                <Box\n                    minWidth=\"200px\"\n                    maxHeight=\"calc(100vh - 132px)\"\n                    padding=\"16px\"\n                    overflow=\"scroll\"\n                >\n                    <SubredditList />\n                </Box>\n                <Box\n                    flexGrow={1}\n                    maxHeight=\"calc(100vh - 100px)\"\n                    overflow=\"scroll\"\n                >\n                    <Feed />\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Home } from \"./Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { AppAUTH } from \"./db-init\";\n\nconst AppContext = React.createContext({\n    user: null\n});\n\nfunction App() {\n    const [user, setUser] = useState(null);\n    useEffect(() => {\n        // create a listener for auth state changes\n        AppAUTH.onAuthStateChanged(user => {\n            if (user) {\n                setUser({\n                    username: user.displayName,\n                    email: user.email\n                });\n            } else {\n                setUser(null);\n            }\n        });\n    }, []);\n    return (\n        <AppContext.Provider value={{ user }}>\n            <div className=\"App\">\n                <Router>\n                    <Switch>\n                        <Route path=\"/r/:subreddit\" exact>\n                            <Home />\n                        </Route>\n                        <Route path=\"/\" exact>\n                            <Home />\n                        </Route>\n                    </Switch>\n                </Router>\n            </div>\n        </AppContext.Provider>\n    );\n}\n\nexport { App, AppContext };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}